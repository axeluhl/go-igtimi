/**
 * File: IgtimiData
 * Project: IgtimiAPI
 *
 * Version 0.9.0
 *
 * Author Stephen Markham
 * Date 18/12/2018
 * Copyright 2019, Igtimi Ltd.
 * Description
 *    Igtimi API data format, for all data that can be stored using the Igtimi API.
 *
 *
 * Note: Versions < 1.0 are liable to breaking changes (including structure)
 *        and therefore implementations based of these should proceed with caution.
 *        After 1.0 all changes *should* be backwards compatible.
 */

syntax = "proto3";

package com.igtimi;

import "google/protobuf/any.proto";

option optimize_for = SPEED;

//Individual Data Types.
enum DataType {
  DATATYPE_NONE = 0;
  DATATYPE_POS = 1;
  DATATYPE_SATQ = 2;
  DATATYPE_SATC = 3;
  DATATYPE_LEN = 4;
  DATATYPE_ANG = 5;
  DATATYPE_COG = 6;
  DATATYPE_HDGM = 7;
  DATATYPE_HDG = 8;
  DATATYPE_SOG = 9;
  DATATYPE_STW = 10;
  DATATYPE_AWA = 11;
  DATATYPE_AWS = 12;
  DATATYPE_HR = 13;
  DATATYPE_FREQ = 14;
  DATATYPE_TEMP = 15;
  DATATYPE_File = 16;
  DATATYPE_ORI = 17;
  DATATYPE_ACC = 18;
  DATATYPE_SPD = 19;
  DATATYPE_FOR = 20;
  DATATYPE_TORQ = 21;
  DATATYPE_TWD = 22;
  DATATYPE_TWS = 23;
  DATATYPE_PRESS = 24;
  DATATYPE_PWR = 25;
  DATATYPE_VOLT = 26;
  DATATYPE_AMP = 27;
  DATATYPE_TIME = 28;
  DATATYPE_NUM = 50;
  DATATYPE_INT = 51;
  DATATYPE_TXT = 52;
  DATATYPE_BOOL = 53;
  DATATYPE_JSON = 54;
  DATATYPE_EVENT = 55;
  DATATYPE_LOG = 56;
  DATATYPE_CMD = 57;
  DATATYPE_SLE = 100;
  DATATYPE_COR = 101;
}

// Bit field
// Bit |7|6|5| 4 | 3  |  2   |    1     | 0  |
// Use |*|*|*|ACK|Sync|Upsert|Persistent|Live|
// if not set, server will set to LIVE_PERSISTENT (3)
// *Reserved for future use.
enum TypeOfService {
  NOT_SET = 0;
  LIVE_ONLY = 1;
  PERSISTENT_ONLY = 2;
  LIVE_PERSISTENT = 3;
  reserved 4; //UPDATE_ONLY (4) - INVALID
  LIVE_UPDATE = 5;
  PERSISTENT_UPDATE = 6;
  LIVE_PERSISTENT_UPDATE = 7;
  SYNC = 8;
  LIVE_SYNC = 9;
  PERSISTENT_SYNC = 10;
  LIVE_PERSISTENT_SYNC = 11;
  reserved 12; //UPDATE_SYNC (12) - INVALID
  LIVE_UPDATE_SYNC = 13;
  PERSISTENT_UPDATE_SYNC = 14;
  LIVE_PERSISTENT_UPDATE_SYNC = 15;
  reserved 16; //ACK_ONLY (16) - INVALID
  LIVE_ACK = 17;
  PERSISTENT_ACK = 18;
  LIVE_PERSISTENT_ACK = 19;
  reserved 20; //UPDATE_ACK (20) - INVALID
  LIVE_UPDATE_ACK = 21;
  PERSISTENT_UPDATE_ACK = 22;
  LIVE_PERSISTENT_UPDATE_ACK = 23;
  reserved 24; //SYNC_ACK (24) - INVALID
  LIVE_SYNC_ACK = 25;
  PERSISTENT_SYNC_ACK = 26;
  LIVE_PERSISTENT_SYNC_ACK = 27;
  reserved 28; //UPDATE_SYNC_ACK (28) - INVALID
  LIVE_UPDATE_SYNC_ACK = 29;
  PERSISTENT_UPDATE_SYNC_ACK = 30;
  LIVE_PERSISTENT_UPDATE_SYNC_ACK = 31;
}

enum SessionLogEntryAction {
  SLE_ACTION_UNKNOWN = 0;

  //Create the entry at the specified timestamp
  //Will fail if the object already exists
  SLE_ACTION_CREATE = 1;

  //Updates an existing entry at specified.
  //Will fail if the object has not been created yet
  SLE_ACTION_UPDATE = 2;

  //Removes the specified object at the specified timestamp
  //Will fail if the object has not been created yet
  SLE_ACTION_REMOVE = 3;

  //Deleted the specified object from the log. (As if it had never been created)
  //Will fail if the object has not been created yet
  SLE_ACTION_DELETE = 4;

  //Creates the entry at the specified timestamp or updates it if already present
  //Provides no guarantee that you won't overwrite an existing object by accident
  SLE_ACTION_CREATE_UPDATE = 5;
}

enum SessionDeviceAction {
  DEVICE_ACTION_UNKNOWN = 0;
  DEVICE_ACTION_ADD = 1;
  DEVICE_ACTION_REMOVE = 2;
}

enum SessionPropertyAction {
  PROPERTY_ACTION_UNKNOWN = 0;
  PROPERTY_ACTION_SET = 1;
  PROPERTY_ACTION_DELETE = 2;
}

message Data {
  repeated DataMsg data = 1 [json_name = "dm"];
}

message DataMsg {
  //required
  repeated DataPoint data = 1 [json_name = "data"];

  // not required (may be determinable from the connection)
  oneof source {
    string serial_number = 2 [json_name = "serial"];
    uint32 session_id = 3 [json_name = "session"];
  }

  // not required (server will default to 3 when not set)
  TypeOfService type_of_service = 4 [json_name = "tos"];

  // not required (can be generated by the server)
  uint32 stream_id = 5 [json_name = "streamID"];
}

message DataPoint {
  // not required (unless specified by the application)
  uint32 source_id = 1001 [json_name = "sourceID"];

  oneof Data {
    GNSS_Position pos = 1 [json_name = "pos"];
    GNSS_Quality satq = 2 [json_name = "satq"];
    GNSS_Sat_Count satc = 3 [json_name = "satc"];
    Length len = 4 [json_name = "len"];
    Angle ang = 5 [json_name = "ang"];
    CourseOverGround cog = 6 [json_name = "cog"];
    HeadingMagnetic hdgm = 7 [json_name = "hdgm"];
    Heading hdg = 8 [json_name = "hdg"];
    SpeedOverGround sog = 9 [json_name = "sog"];
    SpeedThroughWater stw = 10 [json_name = "stw"];
    ApparentWindAngle awa = 11 [json_name = "awa"];
    ApparentWindSpeed aws = 12 [json_name = "aws"];
    HeartRate hr = 13 [json_name = "hr"];
    Frequency freq = 14 [json_name = "freq"];
    Temperature temp = 15 [json_name = "temp"];
    File file = 16 [json_name = "file"];
    Orientation ori = 17 [json_name = "ori"];
    Acceleration acc = 18 [json_name = "acc"];
    Speed spd = 19 [json_name = "spd"];
    Force for = 20 [json_name = "for"];
    Torque torq = 21 [json_name = "torq"];
    TrueWindDirection twd = 22 [json_name = "twd"];
    TrueWindSpeed tws = 23 [json_name = "tws"];
    Pressure press = 24 [json_name = "press"];
    Power pwr = 25 [json_name = "pwr"];
    ElectricalPotential volt = 26 [json_name = "volt"];
    ElectricalCurrent amp = 27 [json_name = "amp"];
    TimeInterval time = 28 [json_name = "time"];
    Number num = 50 [json_name = "num"];
    Integer int = 51 [json_name = "int"];
    Text txt = 52 [json_name = "txt"];
    Boolean bool = 53 [json_name = "bool"];
    JSON json = 54 [json_name = "json"];
    Event event = 55 [json_name = "event"];
    Log log = 56 [json_name = "log"];
    Command cmd = 57 [json_name = "cmd"];
    SessionLogEntry sle = 100 [json_name = "sle"];
    Corrections cor = 101 [json_name = "cor"];
  }
}

//1
message GNSS_Position {
  uint64 timestamp = 1 [json_name = "t"];

  // Lat / Lon in decimal degrees
  double latitude = 2 [json_name = "lat"];
  double longitude = 3 [json_name = "lon"];

  // altitude in metres above MSL.
  double altitude = 4 [json_name = "alt"];

  //Fields set
  uint32 fields = 15 [json_name = "f"];
}

//2
message GNSS_Quality {
  uint64 timestamp = 1 [json_name = "t"];
  int32 value = 2 [json_name = "val"];
}

//3
message GNSS_Sat_Count {
  uint64 timestamp = 1 [json_name = "t"];
  int32 value = 2 [json_name = "val"];
}

//4
message Length {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//5
message Angle {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//6
message CourseOverGround {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//7
message HeadingMagnetic {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//8
message Heading {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//9
message SpeedOverGround {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//10
message SpeedThroughWater {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//11
message ApparentWindAngle {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//12
message ApparentWindSpeed {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//13
message HeartRate {
  uint64 timestamp = 1 [json_name = "t"];
  uint64 event_time = 2 [json_name = "eventTime"];
  uint32 hb_count = 3 [json_name = "hbCount"];
  uint32 heart_rate = 4 [json_name = "heartRate"];

  //TODO Maybe add another field here for variability...

  //Fields set
  uint32 fields = 15 [json_name = "f"];
}

//14
message Frequency {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//15
message Temperature {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//16
message File {
  uint64 timestamp = 1 [json_name = "t"];
  uint64 end_time = 2 [json_name = "endTime"];
  string filename = 3 [json_name = "filename"];
  string md5 = 4 [json_name = "md5"];
  string content_type = 5 [json_name = "contentType"];
  uint64 size = 6 [json_name = "size"];
}

//17
message Orientation {
  uint64 timestamp = 1 [json_name = "t"];
  double x = 2 [json_name = "x"];
  double y = 3 [json_name = "y"];
  double z = 4 [json_name = "z"];
  double w = 5 [json_name = "w"];

  //Fields set
  uint32 fields = 15 [json_name = "f"];
}

//18
message Acceleration {
  uint64 timestamp = 1 [json_name = "t"];
  double x = 2 [json_name = "x"];
  double y = 3 [json_name = "y"];
  double z = 4 [json_name = "z"];

  //Fields set
  uint32 fields = 15 [json_name = "f"];
}

//19
message Speed {
  uint64 timestamp = 1 [json_name = "t"];
  double x = 2 [json_name = "x"];
  double y = 3 [json_name = "y"];
  double z = 4 [json_name = "z"];

  //Fields set
  uint32 fields = 15 [json_name = "f"];
}

//20
message Force {
  uint64 timestamp = 1 [json_name = "t"];
  double x = 2 [json_name = "x"];
  double y = 3 [json_name = "y"];
  double z = 4 [json_name = "z"];

  //Fields set
  uint32 fields = 15 [json_name = "f"];
}

//21
message Torque {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//22
message TrueWindDirection {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//23
message TrueWindSpeed {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//24
message Pressure {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//25
message Power {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//26
message ElectricalPotential {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//27
message ElectricalCurrent {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//28
message TimeInterval {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//50
message Number {
  uint64 timestamp = 1 [json_name = "t"];
  double value = 2 [json_name = "val"];
}

//51
message Integer {
  uint64 timestamp = 1 [json_name = "t"];
  uint64 value = 2 [json_name = "val"];
}

//52
message Text {
  uint64 timestamp = 1 [json_name = "t"];
  string value = 2 [json_name = "val"];
}

//53
message Boolean {
  uint64 timestamp = 1 [json_name = "t"];
  bool value = 2 [json_name = "val"];
}

//54
message JSON {
  uint64 timestamp = 1 [json_name = "t"];
  string value = 2 [json_name = "val"];
}

//55
message Event {
  uint64 timestamp = 1 [json_name = "t"];
  google.protobuf.Any event = 2 [json_name = "event"];
}

//56
message Log {
  uint64 timestamp = 1 [json_name = "t"];
  string message = 2 [json_name = "msg"];
  uint32 priority = 3 [json_name = "priority"];
}

//57
message Command {
  uint64 timestamp = 1 [json_name = "t"];
  string value = 2 [json_name = "val"];
}

//100
message SessionLogEntry {
  message Device {
    SessionDeviceAction action = 1 [json_name = "action"];
    string id = 2 [json_name = "id"];
    string serial_number = 3 [json_name = "serialNumber"];
  }

  message Property {
    SessionPropertyAction action = 1 [json_name = "action"];
    string key = 2 [json_name = "key"];
    string value = 3 [json_name = "value"];
  }

  message Hierarchy {
    string organizational_unit = 1 [json_name = "ou"];
    uint32 parent_id = 2 [json_name = "parentID"];
  }

  message SessionTime {
    uint64 start_time = 1 [json_name = "startTime"];
    uint64 end_time = 2 [json_name = "endTime"];
  }

  message CustomEntry {
    //How should we apply this entry
    SessionLogEntryAction action = 1 [json_name = "action"];

    //Timestamp that the entry will apply at
    uint64 apply_timestamp = 2 [json_name = "applyTimestamp"];

    //required. This is how objects can be updated/removed/deleted
    string id = 3 [json_name = "id"];

    //The 'path' of any objects referenced
    repeated string references = 4 [json_name = "references"];

    //Application specific entry
    google.protobuf.Any entry = 5 [json_name = "entry"];
  }

  //Timestamp the message is sent. Automatically generated by the server. Will be ignored if set.
  uint64 timestamp = 1 [json_name = "t"];

  //Automatically generated by the server. Will be ignored if set.
  uint64 sequence_id = 2 [json_name = "seqID"];

  // Timestamp of the last known entry. If set, the last timestamp in the log sequence will be checked against this, If the last in the sequence is different from the provided value then the packed will be NAK'd. Should this field not be set the check will NOT be performed. INPUT ONLY!!!
  uint64 last_entry_timestamp = 3 [json_name = "lastEntryTimestamp"];

  //One of the 4 igtimi session defining features or a custom entry.
  //YachtBot will use YachtBot defined messages
  //If the user does not want to provide a proto definition for their objects
  //then they may use the json_data field
  oneof Entry {
    string session_name = 4 [json_name = "sessionName"];

    SessionTime session_time = 5 [json_name = "sessionTime"];

    Hierarchy hierarchy = 6 [json_name = "hierarchy"];

    Property property = 7 [json_name = "property"];
    Device device = 8 [json_name = "device"];

    //import an entry from a parent session (use 'full path')
    string import = 9 [json_name = "import"];

    // keep 10->14 as spare fields if we want to support and other 'Igtimi' session fields

    CustomEntry custom_entry = 15 [json_name = "custom"];
  }
}

//101
message Corrections {
  uint64 timestamp = 1 [json_name = "t"];
  bytes value = 2 [json_name = "val"];
}
