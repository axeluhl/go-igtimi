/**
 * File: YachtBot Events
 * Project: YachtBot
 *
 * Version 0.9.0
 *
 * Author Stephen Markham
 * Date 11/03/2019
 * Copyright 2019, Igtimi Ltd., all rights reserved.
 * Description
 *    Schema for Events to be stored in the Igtimi API by the YachtBot application.
 *
 * Note: Versions < 1.0 are liable to breaking changes (including structure)
 *        and therefore implementations based of these should proceed with caution.
 *        After 1.0 all changes *should* be backwards compatible.
 */

syntax = "proto3";
option optimize_for = SPEED;

package com.yachtbot;

import "com/yachtbot/YachtBotSessionLogEntry.proto";

// Main Event Type
message Event {

    string id = 1 [json_name = "id"];

    bool requiresAcknowledgement = 2 [json_name = "requiresAck"];
    string recipient = 3 [json_name = "recipient"]; //The id of the object in the session, optional

    oneof event {
        bool acknowledgement = 4 [json_name = "ack"];
        Alarm alarm = 5 [json_name = "alarm"];
        Intersection intersection = 6 [json_name = "intersection"];
        Protest protest = 7 [json_name = "protest"];
        Penalty penalty = 8 [json_name = "penalty"];
        IndicatorStateChange indicator_state_change = 9 [json_name = "indicatorStateChange"];
        DisplayStateChange display_state_change = 10 [json_name = "displayStateChange"];
        EventProcessed event_processed = 11 [json_name = "eventProcessed"];
        Timer timer = 12 [json_name = "timer"];
    }

}

message Alarm {
    uint32 id = 1 [json_name = "id"]; //AC75 requires this to be an int between 1 and 10, Class rules 25.2(d), 26.1(b)
    float value = 2 [json_name = "value"];
}

message EventProcessed {
    string tag = 1 [json_name = "tag"];
    string message = 2 [json_name = "message"];
}

message Intersection {

    enum ZoneCrossDirection {
        ZONE_ENTRY = 0;
        ZONE_EXIT = 1;
    }

    enum StartCrossDirection {
        START_CROSS_TO_COURSE = 0;
        START_CROSS_FROM_COURSE = 1;
    }

    enum FinishCrossDirection {
        FINISH_CROSS_TO_COURSE = 0;
        FINISH_CROSS_FROM_COURSE = 1;
    }

    message StartLineCrossing {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        string object_id = 2 [json_name = "objectID"]; // ID of the relevant object (e.boat)
        StartCrossDirection cross_direction = 3 [json_name = "crossDirection"]; //direction of crossing
    }

    message FinishLineCrossing {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        string object_id = 2 [json_name = "objectID"];
        FinishCrossDirection cross_direction = 3 [json_name = "crossDirection"]; //direction of crossing
    }

    message RaceMarkRounding {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        uint32 sequence_id = 2 [json_name = "sequenceID"]; //ID of the mark in the course sequence
        string object_id = 3 [json_name = "objectID"];
    }

    message StartBoxEntry {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        string object_id = 2 [json_name = "objectID"];
        ZoneCrossDirection direction = 3 [json_name = "direction"];
    }

    message RaceMarkZone {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        uint32 sequence_id = 2 [json_name = "sequenceID"]; //ID of the mark in the course sequence
        string object_id = 3 [json_name = "objectID"];
        ZoneCrossDirection direction = 4 [json_name = "direction"];

        //Previous crossing that is related to this event e.g, the entry related to an exit
        string related_zone_event = 5 [json_name = "relatedZoneEvent"];
    }

    message RaceBoundary {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        string object_id = 2 [json_name = "objectID"];
        ZoneCrossDirection direction = 3 [json_name = "direction"];

        //Previous crossing that is related to this event e.g, the exit related to an entry
        string related_zone_event = 5 [json_name = "relatedZoneEvent"];
    }

    message RaceBoundaryZone {
        string course_id = 1 [json_name = "courseID"]; //ID of the race course
        string object_id = 2 [json_name = "objectID"];
        ZoneCrossDirection direction = 3 [json_name = "direction"];

        //Previous crossing that is related to this event e.g, the entry related to an exit
        string related_zone_event = 5 [json_name = "relatedZoneEvent"];
    }

    message GenericArea {
        string area_id = 1 [json_name = "areaID"];
        string object_id = 2 [json_name = "objectID"];
        ZoneCrossDirection direction = 3 [json_name = "direction"];
    }

    uint64 intersection_time = 1;
    Location location = 2 [json_name = "location"];

    //FUTURE Calculated by.... = 3
    //reserve 4 + 5 for any other fields we might want to add

    oneof event {
        StartLineCrossing start_line_crossing = 6 [json_name = "startLineCrossing"];
        FinishLineCrossing finish_line_crossing = 7 [json_name = "finishLineCrossing"];
        RaceMarkRounding race_mark_rounding = 8 [json_name = "raceMarkRounding"];
        StartBoxEntry start_box_entry = 9 [json_name = "startBoxEntry"];
        RaceMarkZone race_mark_zone = 10 [json_name = "raceMarkZone"];
        RaceBoundary race_boundary = 11 [json_name = "raceBoundary"];
        RaceBoundaryZone race_boundary_zone = 12 [json_name = "raceBoundaryZone"];
        GenericArea generic_area = 13 [json_name = "genericArea"];
    }

}

message Protest {
    string message = 1 [json_name = "msg"];
}

message Penalty {

    enum PenaltyState {
        PENALTY_GIVEN = 0;
        PENALTY_COMPLETED = 1;
        PENALTY_CANCELLED = 2;
    }

    enum IncidentType {
        INCIDENT_TYPE_OTHER = 0; //Should set description in message
        INCIDENT_START_BOX_EARLY = 1;
        INCIDENT_START_BOX_LATE = 2;
        INCIDENT_OCS = 3;
        INCIDENT_BOUNDARY = 4;
        INCIDENT_BOAT_ON_BOAT = 5;
    }

    enum Punishment {
        PUNISHMENT_DEFAULT = 0;
        PUNISHMENT_DSQ = 1;
        PUNISHMENT_GET_BEHIND = 2;
        PUNISHMENT_LOSE_DISTANCE = 3;
        PUNISHMENT_RESTART = 4;
    }

    message Incident {
        uint64 incident_time = 1 [json_name = "incidentTime"];
        Location location = 2 [json_name = "location"];
        IncidentType type = 3 [json_name = "type"];
        //could be either a protest, Intersection or other Penalty (i.e. if they get another penalty for being too slow to clear)
        string event_id = 4 [json_name = "eventID"];
    }

    PenaltyState state = 1 [json_name = "state"];

    //usually only set when the penalty is given
    Incident incident = 2 [json_name = "incident"];

    Punishment punishment = 3 [json_name = "punishment"];

    string message = 4 [json_name = "msg"];
}

message IndicatorStateChange {

    enum RequestIndicatorState {
        REQUEST_INDICATOR_AUTO = 0;
        REQUEST_INDICATOR_MANUAL_OFF = 1;
        REQUEST_INDICATOR_MANUAL_ON = 2;
        REQUEST_INDICATOR_MANUAL_FLASHING = 3;
    }

    enum IndicatorState {
        INDICATOR_STATE_OFF = 0;
        INDICATOR_STATE_ON = 1;
        INDICATOR_STATE_FLASHING = 2;
        //FUTURE Further indicator states can be defined if needed
    }

    enum Indicator {
        INDICATOR_DEFAULT = 0;
        INDICATOR_PENALTY = 1;
        INDICATOR_ZONE = 2;
    }

    message Request {
        Indicator indicator = 1 [json_name = "indicator"];
        RequestIndicatorState state = 2 [json_name = "state"];
        string message = 3 [json_name = "message"];
    }

    message Report {
        Indicator indicator = 1 [json_name = "indicator"];
        IndicatorState state = 2 [json_name = "state"];
        string message = 3 [json_name = "message"];
    }

    oneof message {
        Request request = 1 [json_name = "request"];
        Report report = 2 [json_name = "report"];
    }
}

message DisplayStateChange {

    enum MessageType {
        DISPLAY_STATE_CHANGE_REQUEST = 0;
        DISPLAY_STATE_CHANGE_REPORT = 1;
    }

    MessageType message_type = 1 [json_name = "messageType"];

    oneof display {
        string title_one = 3 [json_name = "titleOne"];
        string title_two = 4 [json_name = "titleTwo"];
        string title_three = 5 [json_name = "titleThree"];
        string message = 6 [json_name = "message"];
    }
}

message Timer {

    enum TimerAction {
        TIMER_ACTION_START = 0;
        TIMER_ACTION_STOP = 1;
        TIMER_ACTION_RESET = 2;
    }

    string id = 1;
    TimerAction action = 2;
}
